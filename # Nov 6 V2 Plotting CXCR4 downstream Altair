import pandas as pd
import json
import scanpy as sc
import anndata
from PIL import Image
import matplotlib.pyplot as plt
import numpy as np
import altair as alt
sys.path.append("/cluster/projects/schwartzgroup/vg/altair-themes")
if True:  # In order to bypass isort when saving
    import altairThemes

alt.themes.register("publishTheme", altairThemes.publishTheme)
alt.themes.enable("publishTheme")

PPI_matrix = pd.read_csv('/cluster/projects/schwartzgroup/vg/NEST_revision/Deisha_Database/signaling_network_human_21122021_stringdb_scored.csv')
TF_matrix = pd.read_csv('/cluster/projects/schwartzgroup/vg/NEST_revision/Deisha_Database/dorothea_filtered.csv')

########## For PPI, we want to see the downstream genes of CXCR4, and there's only three
# CXCR4 downstream genes
CXCR4_immediate_downstream_genes_with_scores = PPI_matrix[PPI_matrix['source'] == 'CXCR4'][['target', 'experimental_score']].values.tolist()
CXCR4_immediate_downstream_genes_with_scores.sort(key=lambda x: x[1], reverse=True)

top_20_percent_index = int(len(CXCR4_immediate_downstream_genes_with_scores) * 0.2)
top_20_percent_genes = CXCR4_immediate_downstream_genes_with_scores[:top_20_percent_index]
top_20_percent_gene_names = list(set([gene[0] for gene in top_20_percent_genes]))

# Filter genes present in dataset and calculate expression
found_genes = [gene for gene in top_20_percent_gene_names if gene in adata.var_names]
adata.obs['CXCR4_downstream_20_avg'] = adata[:, found_genes].X.mean(axis=1)
adata.obs['CXCR4_downstream_20_avg_log'] = np.log1p(adata[:, found_genes].X.mean(axis=1).A1)

# Extract spatial coordinates
adata.obs['x'] = adata.obsm['spatial'][:, 0]
adata.obs['y'] = adata.obsm['spatial'][:, 1]

# Convert to DataFrame for plotting
plot_data = adata.obs[['x', 'y', 'CXCR4_downstream_20_avg_log']].copy()

# Function to create spatial expression plot with custom theme
def create_spatial_expression_plot(data, title, output_file):
    data['y'] = -data['y']  # Flip y-coordinates for plot orientation

    scatter_plot = (
        alt.Chart(data)
        .mark_circle(size=14)
        .encode(
            x=alt.X('x:Q', title=None, axis=alt.Axis(grid=False, ticks=False, labels=False, domain=False)),
            y=alt.Y('y:Q', title=None, axis=alt.Axis(grid=False, ticks=False, labels=False, domain=False)),
            color=alt.Color('CXCR4_downstream_20_avg_log:Q', scale=alt.Scale(scheme='magma'), title="Expression Level"),
            tooltip=['CXCR4_downstream_20_avg_log']
        )
        .properties(
            width=250,
            height=250,
            title=title
        )
        .configure_view(
            stroke=None,
            strokeWidth=0
        )
    )

    # Save as HTML file
    scatter_plot.save(output_file)


# Define output file path and title
output_file = "/cluster/projects/schwartzgroup/vg/NEST_revision/CXCR4_downstream_20p_spatial_expression_altair_log.html"
create_spatial_expression_plot(plot_data, "Mean Expression of Top 20% CXCR4 Downstream Genes", output_file)
